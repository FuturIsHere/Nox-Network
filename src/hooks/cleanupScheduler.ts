// lib/cleanupScheduler.ts
// Syst√®me de nettoyage automatique des fichiers temporaires

class CleanupScheduler {
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning = false;

  /**
   * D√©marre le nettoyage automatique p√©riodique
   * @param intervalMinutes Intervalle en minutes entre chaque nettoyage (d√©faut: 30 min)
   * @param maxAgeMinutes √Çge maximum des fichiers √† garder (d√©faut: 60 min)
   */
  start(intervalMinutes: number = 30, maxAgeMinutes: number = 60) {
    if (this.isRunning) {
      console.log('üîÑ [CleanupScheduler] D√©j√† d√©marr√©');
      return;
    }

    console.log(`üöÄ [CleanupScheduler] D√©marrage du nettoyage automatique (toutes les ${intervalMinutes} min)`);
    
    this.isRunning = true;
    
    // Nettoyage imm√©diat au d√©marrage
    this.performCleanup(maxAgeMinutes);
    
    // Programmer les nettoyages p√©riodiques
    this.intervalId = setInterval(() => {
      this.performCleanup(maxAgeMinutes);
    }, intervalMinutes * 60 * 1000);
  }

  /**
   * Arr√™te le nettoyage automatique
   */
  stop() {
    if (!this.isRunning) {
      console.log('‚èπÔ∏è [CleanupScheduler] D√©j√† arr√™t√©');
      return;
    }

    console.log('üõë [CleanupScheduler] Arr√™t du nettoyage automatique');
    
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    
    this.isRunning = false;
  }

  /**
   * Effectue un nettoyage imm√©diat
   */
  async performCleanup(maxAgeMinutes: number = 60) {
    try {
      console.log(`üßπ [CleanupScheduler] Nettoyage automatique en cours...`);
      
      const response = await fetch('/api/cleanup-temp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ maxAgeMinutes }),
      });

      if (response.ok) {
        const result = await response.json();
        console.log(`‚úÖ [CleanupScheduler] ${result.message}`);
      } else {
        console.error('‚ùå [CleanupScheduler] Erreur HTTP:', response.status);
      }
    } catch (error) {
      console.error('‚ùå [CleanupScheduler] Erreur nettoyage:', error);
    }
  }

  /**
   * Retourne le statut du scheduler
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      hasInterval: this.intervalId !== null
    };
  }
}

// Instance singleton du scheduler
export const cleanupScheduler = new CleanupScheduler();

// Fonction d'initialisation √† appeler au d√©marrage de l'application
export function initializeCleanupScheduler() {
  // D√©marrer le nettoyage automatique seulement en production
  if (process.env.NODE_ENV === 'production') {
    cleanupScheduler.start(30, 60); // Toutes les 30 min, fichiers > 1h
  } else {
    // En d√©veloppement, nettoyage moins fr√©quent
    cleanupScheduler.start(60, 120); // Toutes les 60 min, fichiers > 2h
  }
}

// Fonction de nettoyage manuel pour les composants
export async function manualCleanup(tempUrl: string): Promise<boolean> {
  try {
    if (!tempUrl.includes('/temp/')) {
      return false;
    }

    const tempFilename = tempUrl.split('/temp/')[1];
    
    const response = await fetch('/api/cleanup-temp-messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ tempFilename }),
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ [ManualCleanup] Fichier nettoy√©:', tempFilename);
      return result.cleaned;
    } else {
      console.warn('‚ö†Ô∏è [ManualCleanup] √âchec nettoyage:', tempFilename);
      return false;
    }
  } catch (error) {
    console.error('‚ùå [ManualCleanup] Erreur:', error);
    return false;
  }
}